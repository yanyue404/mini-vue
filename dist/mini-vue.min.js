!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--b&&0===_&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="d0729518302be7514870",i={},c=[],a=[];function s(e){var t=D[e];if(!t)return M;var r=function(r){return t.hot.active?(D[r]?-1===D[r].parents.indexOf(e)&&D[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),M(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return M[e]},set:function(t){M[e]=t}}};for(var i in M)Object.prototype.hasOwnProperty.call(M,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===l&&f("prepare"),_++,M.e(e).then(t,(function(e){throw t(),e}));function t(){_--,"prepare"===l&&(m[e]||k(e),0===_&&0===b&&E())}},r.t=function(e,t){return 1&t&&(e=r(e)),M.t(e,-2&t)},r}function u(t){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(h={})[t]=e[t],f("ready");break;case"ready":P(t);break;case"prepare":case"check":case"dispose":case"apply":(y=y||[]).push(t)}},check:j,apply:x,status:function(e){if(!e)return l;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[t]};return n=void 0,r}var d=[],l="idle";function f(e){l=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var p,h,v,y,b=0,_=0,m={},g={},w={};function O(e){return+e+""===e?+e:e}function j(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,f("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=M.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return f($()?"ready":"idle"),null;g={},m={},w=e.c,v=e.h,f("prepare");var t=new Promise((function(e,t){p={resolve:e,reject:t}}));h={};return k(0),"prepare"===l&&0===_&&0===b&&E(),t}));var t}function k(e){w[e]?(g[e]=!0,b++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=M.p+""+e+"."+o+".hot-update.js",document.head.appendChild(t)}(e)):m[e]=!0}function E(){f("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then((function(){return x(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(O(n));e.resolve(t)}}function x(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function t(r){var a,s,u,d,l;function p(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,c=o.chain;if((d=D[i])&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var a=0;a<d.parents.length;a++){var s=d.parents[a],u=D[s];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([s]),moduleId:i,parentId:s};-1===t.indexOf(s)&&(u.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),b(n[s],[i])):(delete n[s],t.push(s),r.push({chain:c.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}$();var _={},m=[],g={},j=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var k in h)if(Object.prototype.hasOwnProperty.call(h,k)){var E;l=O(k),E=h[k]?p(l):{type:"disposed",moduleId:k};var x=!1,P=!1,H=!1,A="";switch(E.chain&&(A="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(x=new Error("Aborted because of self decline: "+E.moduleId+A));break;case"declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+A));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(E),r.ignoreUnaccepted||(x=new Error("Aborted because "+l+" is not accepted"+A));break;case"accepted":r.onAccepted&&r.onAccepted(E),P=!0;break;case"disposed":r.onDisposed&&r.onDisposed(E),H=!0;break;default:throw new Error("Unexception type "+E.type)}if(x)return f("abort"),Promise.reject(x);if(P)for(l in g[l]=h[l],b(m,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,l)&&(_[l]||(_[l]=[]),b(_[l],E.outdatedDependencies[l]));H&&(b(m,[E.moduleId]),g[l]=j)}var I,S=[];for(s=0;s<m.length;s++)l=m[s],D[l]&&D[l].hot._selfAccepted&&g[l]!==j&&!D[l].hot._selfInvalidated&&S.push({module:l,parents:D[l].parents.slice(),errorHandler:D[l].hot._selfAccepted});f("dispose"),Object.keys(w).forEach((function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)}));var T,U,C=m.slice();for(;C.length>0;)if(l=C.pop(),d=D[l]){var q={},R=d.hot._disposeHandlers;for(u=0;u<R.length;u++)(a=R[u])(q);for(i[l]=q,d.hot.active=!1,delete D[l],delete _[l],u=0;u<d.children.length;u++){var N=D[d.children[u]];N&&((I=N.parents.indexOf(l))>=0&&N.parents.splice(I,1))}}for(l in _)if(Object.prototype.hasOwnProperty.call(_,l)&&(d=D[l]))for(U=_[l],u=0;u<U.length;u++)T=U[u],(I=d.children.indexOf(T))>=0&&d.children.splice(I,1);f("apply"),void 0!==v&&(o=v,v=void 0);for(l in h=void 0,g)Object.prototype.hasOwnProperty.call(g,l)&&(e[l]=g[l]);var W=null;for(l in _)if(Object.prototype.hasOwnProperty.call(_,l)&&(d=D[l])){U=_[l];var F=[];for(s=0;s<U.length;s++)if(T=U[s],a=d.hot._acceptedDependencies[T]){if(-1!==F.indexOf(a))continue;F.push(a)}for(s=0;s<F.length;s++){a=F[s];try{a(U)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:l,dependencyId:U[s],error:e}),r.ignoreErrored||W||(W=e)}}}for(s=0;s<S.length;s++){var L=S[s];l=L.module,c=L.parents,n=l;try{M(l)}catch(e){if("function"==typeof L.errorHandler)try{L.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:t,originalError:e}),r.ignoreErrored||W||(W=t),W||(W=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:l,error:e}),r.ignoreErrored||W||(W=e)}}if(W)return f("fail"),Promise.reject(W);if(y)return t(r).then((function(e){return m.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return f("idle"),new Promise((function(e){e(m)}))}(t=t||{})}function $(){if(y)return h||(h={}),y.forEach(P),y=void 0,!0}function P(t){Object.prototype.hasOwnProperty.call(h,t)||(h[t]=e[t])}var D={};function M(t){if(D[t])return D[t].exports;var n=D[t]={i:t,l:!1,exports:{},hot:u(t),parents:(a=c,c=[],a),children:[]};return e[t].call(n.exports,n,n.exports,s(t)),n.l=!0,n.exports}M.m=e,M.c=D,M.d=function(e,t,n){M.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},M.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},M.t=function(e,t){if(1&t&&(e=M(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(M.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)M.d(n,r,function(t){return e[t]}.bind(null,r));return n},M.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return M.d(t,"a",t),t},M.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},M.p="",M.h=function(){return o},s("./src/main.js")(M.s="./src/main.js")}({"./src/complie.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compile=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./src/watcher.js");t.compile=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$vm=n,this.$el=t,this.$fragment=this.node2Fragment(this.$el),this.compile(this.$fragment),this.$el.appendChild(this.$fragment)}return r(e,[{key:"node2Fragment",value:function(e){for(var t=document.createDocumentFragment(),n=void 0;n=e.firstChild;)t.appendChild(n);return t}},{key:"compile",value:function(e){var t=this,n=e.childNodes;Array.from(n).forEach((function(e){1===e.nodeType?t.compileElement(e):t.isInterpolation(e)&&t.compileText(e),e.childNodes&&e.childNodes.length>0&&t.compile(e)}))}},{key:"compileElement",value:function(e){var t=this,n=e.attributes;Array.from(n).forEach((function(n){var r=n.name,o=n.value;if(t.isDirective(r)){var i=r.substring(2);console.log(i),t[i]&&t[i](e,t.$vm,o,i)}if(t.isEvent(r)){var c=r.substring(1);t.eventHandler(e,t.$vm,o,c)}}))}},{key:"isInterpolation",value:function(e){return 3===e.nodeType&&/\{\{(.*)\}\}/.test(e.textContent)}},{key:"isDirective",value:function(e){return 0===e.indexOf("v-")}},{key:"isEvent",value:function(e){return 0===e.indexOf("@")}},{key:"compileText",value:function(e){console.log("编译插值⽂文本: "+RegExp.$1);var t=RegExp.$1;this.update(e,t,"text")}},{key:"update",value:function(e,t,n){var r=this[n+"Updater"];r&&r(e,this.$vm[t]),new o.Watcher(this.$vm,t,(function(t){r&&r(e,t)}))}},{key:"textUpdater",value:function(e,t){e.textContent=t}},{key:"modelUpdater",value:function(e,t){e.value=t}},{key:"htmlUpdater",value:function(e,t){e.innerHTML=t}},{key:"eventHandler",value:function(e,t,n,r){var o=t[n];r&&o&&e.addEventListener(r,o.bind(t))}},{key:"on",value:function(e,t,n,r){console.log("on ---"),console.log(arguments)}},{key:"text",value:function(e,t,n){this.update(e,n,"text")}},{key:"model",value:function(e,t,n){this.update(e,n,"model"),e.addEventListener("input",(function(e){t[n]=e.target.value}))}},{key:"html",value:function(e,t,n){this.update(e,n,"html")}}]),e}()},"./src/dep.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var r=0;function o(){this.id=r++,this.subs=[]}o.target=null,o.prototype={depend:function(){o.target&&o.target.addDep(this)},addSub:function(e){this.subs.push(e)},removeSub:function(e){var t=this.subs.indexOf(e);t>-1&&this.subs.splice(t,1)},notify:function(){this.subs.forEach((function(e){e.update()}))}}},"./src/main.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=c;var r=n("./src/observe.js"),o=n("./src/complie.js"),i=n("./src/watcher.js");function c(e){this._init(e)}c.prototype={constructor:c,_init:function(e){this.$options=e,this.$el=document.querySelector(e.el),this._events={},this._isMiniVue=!0,this._callHook("beforeCreate"),this.initData(),this.initMethods(),new r.observe(this._data,this),this.initWatch(),this._callHook("created"),e.el&&(this._callHook("beforeMount"),new o.compile(this.$el,this))},_callHook:function(e){var t=this,n=this.$options[e];"function"==typeof n?n.call(this):n&&n.forEach((function(e){e.call(t)}))},initData:function(){var e=this,t=e.$options.data;t=e._data="function"==typeof t?t():t||{},this.$data=t,Object.keys(t).forEach((function(t){e.proxy(e,"_data",t)}))},initMethods:function(){var e=this,t=e.$options.methods?e.$options.methods:{};Object.keys(t).forEach((function(n){e[n]=t[n]}))},initWatch:function(){var e=this;if(this.$options.watch){var t=this.$options.watch;Object.keys(t).forEach((function(n){e.$watch(n,t[n])}))}},proxy:function(e,t,n){var r={enumerable:!0,configurable:!0,get:function(){return this[t][n]},set:function(e){this[t][n]=e}};Object.defineProperty(e,n,r)},$watch:function(e,t){new i.Watcher(this,e,t)},$set:function(e,t,n){this[e][t]=n,this[e].__ob__.dep.notify()},$delete:function(e,t){isArray(this[e])?this[e].splice(t,1):(delete this[e][t],this[e].__ob__.dep.notify())},$nextTick:i.nextTick,$on:function(e,t){(this._events[e]||(this._events[e]=[])).push(t)},$off:function(e,t){var n=this._events[e];if(t)for(var r=n.length;r--;){n[r]===t&&n.splice(r,1)}else n.length=0},$emit:function(e){var t=this,n=this._events[e],r=toArray(arguments,1);n?r.length>1?n.forEach((function(e){e.apply(t,r)})):n.forEach((function(e){e.call(t,r[0])})):this._events[e]=[]},$once:function(e,t){var n=this;this.$on(e,(function r(){n.$off(e,r),t.apply(this,arguments)}))}},window.MiniVue=c},"./src/observe.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.observe=d,t.defineReactive=f;var o,i=n("./src/dep.js"),c=(o=i)&&o.__esModule?o:{default:o},a=n("./src/utils/index.js");var s=Array.prototype,u=Object.create(s);function d(e){if(e&&"object"===(void 0===e?"undefined":r(e))){var t=void 0;return(0,a.hasOwn)(e,"__ob__")&&e.__ob__ instanceof l?t=e.__ob__:e._isMiniVue||(t=new l(e)),t}}function l(e){this.value=e,this.dep=new c.default,(0,a.def)(e,"__ob__",this),(0,a.isArray)(e)?(e.__proto__=u,this.observeArray(e)):this.walk(e)}function f(e,t,n){var r=new c.default,o=d(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){if(c.default.target&&(r.depend(),o&&o.dep.depend(),(0,a.isArray)(n)))for(var e,t=0,i=n.length;t<i;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend();return n},set:function(e){n!==e&&(n=e,o=d(e),r.notify())}})}["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=s[e];(0,a.def)(u,e,(function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=t.apply(this,r),c=this.__ob__,a=void 0;switch(e){case"push":case"unshift":a=r;break;case"splice":a=r.slice(2)}return a&&c.observeArray(a),c.dep.notify(),i}))})),l.prototype={walk:function(e){for(var t=Object.keys(e),n=0,r=t.length;n<r;n++)f(e,t[n],e[t[n]])},observeArray:function(e){e.forEach((function(e){d(e)}))}}},"./src/utils/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasOwn=function(e,t){return hasOwnProperty.call(e,t)},t.def=function(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})},t.makeGetterFn=function(e){return new Function("vm","return vm."+e)};t.isArray=Array.isArray},"./src/watcher.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Watcher=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.nextTick=f;var o,i=n("./src/dep.js"),c=(o=i)&&o.__esModule?o:{default:o};var a=0,s=(t.Watcher=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=a++,this.vm=t,this.key=n,this.cb=r,this.deps=[],this.depIds=new Set,this.getter=function(){return t[n]},this.oldValue=this.vm.$data[n],this.value=this.get(),"arr"===n&&console.log("init ----",JSON.stringify(this.value))}return r(e,[{key:"get",value:function(){c.default.target=this;var e=this.getter();return c.default.target=null,e}},{key:"addDep",value:function(e){this.depIds.has(e.id)||(this.deps.push(e),this.depIds.add(e.id),e.addSub(this))}},{key:"update",value:function(){!function(e){var t=e.id;null==u[t]&&(u[t]=s.length,s.push(e));d||(d=!0,f(l))}(this)}},{key:"run",value:function(){var e=this.get(),t=this.value;e!==t?this.cb.call(this.vm,e,t):console.log("没有变化======"),this.value=e}}]),e}(),[]),u={},d=!1;function l(){s.forEach((function(e){e.run()})),d=!1,u={},s.length=0}function f(e,t){Promise.resolve().then((function(){t?e.call(t):e()}))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,